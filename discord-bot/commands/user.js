const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getUserInfo } = require('../database');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('user')
    .setDescription('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
    .addIntegerOption(option =>
      option.setName('id')
        .setDescription('ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
        .setRequired(true)),
  
  async execute(interaction, client) {
    try {
      await interaction.deferReply();
      
      // Get user ID from command
      const userId = interaction.options.getInteger('id');
      
      // Get database connection
      const database = client.database;
      
      // Get user information
      const user = await getUserInfo(database, userId);
      
      if (!user) {
        return await interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ' });
      }
      
      // Create embed
      const embed = new EmbedBuilder()
        .setTitle(`üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}`)
        .setColor(0x0099ff)
        .addFields(
          { name: 'üÜî ID', value: user.id.toString(), inline: true },
          { name: 'üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: user.username, inline: true },
          { name: 'üí∞ ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï', value: `${parseFloat(user.point).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó`, inline: true },
          { name: 'üíµ ‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏∞‡∏™‡∏°', value: `${parseFloat(user.total).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó`, inline: true },
          { name: 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£', value: new Date(user.date).toLocaleDateString('th-TH'), inline: true },
          { name: 'üëë ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: user.rank === 1 ? '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' : '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', inline: true },
          { name: '‚≠ê ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å VIP', value: user.vip_role === 1 ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà', inline: true }
        )
        .setTimestamp()
        .setFooter({ text: 'Dedazen Store Monitoring Bot' });
      
      await interaction.editReply({ embeds: [embed] });
    } catch (error) {
      logger.error('Error in user command:', error);
      await interaction.editReply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
  }
};