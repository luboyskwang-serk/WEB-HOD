const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getProductInfo } = require('../database');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('product')
    .setDescription('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
    .addIntegerOption(option =>
      option.setName('id')
        .setDescription('ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
        .setRequired(true)),
  
  async execute(interaction, client) {
    try {
      await interaction.deferReply();
      
      // Get product ID from command
      const productId = interaction.options.getInteger('id');
      
      // Get database connection
      const database = client.database;
      
      // Get product information
      const product = await getProductInfo(database, productId);
      
      if (!product) {
        return await interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ' });
      }
      
      // Create embed
      const embed = new EmbedBuilder()
        .setTitle(`üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${product.name}`)
        .setColor(0x00ff00)
        .addFields(
          { name: 'üÜî ID', value: product.id.toString(), inline: true },
          { name: 'üè∑Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', value: product.name, inline: true },
          { name: 'üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥', value: `${parseFloat(product.price).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó`, inline: true },
          { name: 'üíé ‡∏£‡∏≤‡∏Ñ‡∏≤ VIP', value: `${parseFloat(product.price_vip).toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó`, inline: true },
          { name: 'üìä ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå', value: `${product.percent}%`, inline: true },
          { name: 'üè∑Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: product.c_type, inline: true },
          { name: 'üéÅ ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö', value: product.salt_prize, inline: true }
        )
        .setTimestamp()
        .setFooter({ text: 'Dedazen Store Monitoring Bot' });
      
      await interaction.editReply({ embeds: [embed] });
    } catch (error) {
      logger.error('Error in product command:', error);
      await interaction.editReply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
    }
  }
};