const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('webhook')
    .setDescription('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Webhook ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)')
    .addSubcommand(subcommand =>
      subcommand
        .setName('add')
        .setDescription('‡πÄ‡∏û‡∏¥‡πà‡∏° Webhook ‡πÉ‡∏´‡∏°‡πà')
        .addStringOption(option =>
          option.setName('url')
            .setDescription('URL ‡∏Ç‡∏≠‡∏á Webhook')
            .setRequired(true))
        .addStringOption(option =>
          option.setName('events')
            .setDescription('‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤)')))
    .addSubcommand(subcommand =>
      subcommand
        .setName('remove')
        .setDescription('‡∏•‡∏ö Webhook')
        .addStringOption(option =>
          option.setName('url')
            .setDescription('URL ‡∏Ç‡∏≠‡∏á Webhook')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('list')
        .setDescription('‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Webhook ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'))
    .addSubcommand(subcommand =>
      subcommand
        .setName('test')
        .setDescription('‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook')
        .addStringOption(option =>
          option.setName('url')
            .setDescription('URL ‡∏Ç‡∏≠‡∏á Webhook')
            .setRequired(true))),
  
  async execute(interaction, client) {
    // Check if user has admin role
    if (!interaction.member.roles.cache.has(process.env.ADMIN_ROLE_ID)) {
      return await interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ', ephemeral: true });
    }
    
    const subcommand = interaction.options.getSubcommand();
    
    try {
      switch (subcommand) {
        case 'add':
          await handleAddWebhook(interaction, client);
          break;
        case 'remove':
          await handleRemoveWebhook(interaction, client);
          break;
        case 'list':
          await handleListWebhooks(interaction, client);
          break;
        case 'test':
          await handleTestWebhook(interaction, client);
          break;
        default:
          await interaction.reply({ content: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', ephemeral: true });
      }
    } catch (error) {
      logger.error(`Error in webhook ${subcommand} command:`, error);
      await interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', ephemeral: true });
    }
  }
};

async function handleAddWebhook(interaction, client) {
  await interaction.deferReply();
  
  const url = interaction.options.getString('url');
  const events = interaction.options.getString('events');
  
  // Validate URL format
  try {
    new URL(url);
  } catch (error) {
    return await interaction.editReply({ content: '‚ùå URL ‡∏Ç‡∏≠‡∏á Webhook ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }
  
  // Add webhook to system
  if (client.webhookSystem) {
    client.webhookSystem.addWebhook(url, events ? events.split(',').map(e => e.trim()) : []);
    
    const embed = new EmbedBuilder()
      .setTitle('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      .setColor(0x00ff00)
      .addFields(
        { name: 'URL', value: url, inline: false },
        { name: '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå', value: events || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', inline: false }
      )
      .setTimestamp();
    
    await interaction.editReply({ embeds: [embed] });
    logger.info(`Webhook added by ${interaction.user.tag}: ${url}`);
  } else {
    await interaction.editReply({ content: '‚ùå ‡∏£‡∏∞‡∏ö‡∏ö Webhook ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤' });
  }
}

async function handleRemoveWebhook(interaction, client) {
  await interaction.deferReply();
  
  const url = interaction.options.getString('url');
  
  // Remove webhook from system
  if (client.webhookSystem) {
    client.webhookSystem.removeWebhook(url);
    
    const embed = new EmbedBuilder()
      .setTitle('‚úÖ ‡∏•‡∏ö Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      .setColor(0x00ff00)
      .addFields(
        { name: 'URL', value: url, inline: false }
      )
      .setTimestamp();
    
    await interaction.editReply({ embeds: [embed] });
    logger.info(`Webhook removed by ${interaction.user.tag}: ${url}`);
  } else {
    await interaction.editReply({ content: '‚ùå ‡∏£‡∏∞‡∏ö‡∏ö Webhook ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤' });
  }
}

async function handleListWebhooks(interaction, client) {
  await interaction.deferReply();
  
  if (client.webhookSystem) {
    const webhooks = client.webhookSystem.getWebhooks();
    
    if (webhooks.length === 0) {
      return await interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Webhook ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤' });
    }
    
    const webhookFields = webhooks.map((webhook, index) => ({
      name: `Webhook #${index + 1}`,
      value: `URL: ${webhook.url}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${webhook.enabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}\n‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${webhook.events.length > 0 ? webhook.events.join(', ') : '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}`,
      inline: false
    }));
    
    const embed = new EmbedBuilder()
      .setTitle('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Webhook ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
      .setColor(0x0099ff)
      .addFields(webhookFields)
      .setTimestamp();
    
    await interaction.editReply({ embeds: [embed] });
  } else {
    await interaction.editReply({ content: '‚ùå ‡∏£‡∏∞‡∏ö‡∏ö Webhook ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤' });
  }
}

async function handleTestWebhook(interaction, client) {
  await interaction.deferReply();
  
  const url = interaction.options.getString('url');
  
  if (client.webhookSystem) {
    // Send test payload
    const success = await client.webhookSystem.sendToWebhook(url, {
      event: 'test',
      message: 'This is a test webhook from Dedazen Store Bot',
      timestamp: new Date().toISOString()
    });
    
    if (success) {
      const embed = new EmbedBuilder()
        .setTitle('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        .setColor(0x00ff00)
        .addFields(
          { name: 'URL', value: url, inline: false },
          { name: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', value: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', inline: false }
        )
        .setTimestamp();
      
      await interaction.editReply({ embeds: [embed] });
    } else {
      await interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Webhook ‡πÑ‡∏î‡πâ' });
    }
  } else {
    await interaction.editReply({ content: '‚ùå ‡∏£‡∏∞‡∏ö‡∏ö Webhook ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤' });
  }
}