// Command: /users - Manage users
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('users')
        .setDescription('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
                .addIntegerOption(option =>
                    option.setName('page')
                        .setDescription('‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£')
                        .setMinValue(1)
                        .setMaxValue(100)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
                .addStringOption(option =>
                    option.setName('user_id')
                        .setDescription('‡πÑ‡∏≠‡∏î‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('ban')
                .setDescription('‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
                .addStringOption(option =>
                    option.setName('user_id')
                        .setDescription('‡πÑ‡∏≠‡∏î‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('reason')
                        .setDescription('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•')))
        .addSubcommand(subcommand =>
            subcommand
                .setName('unban')
                .setDescription('‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
                .addStringOption(option =>
                    option.setName('user_id')
                        .setDescription('‡πÑ‡∏≠‡∏î‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
                        .setRequired(true))),
    permissions: {
        adminOnly: true
    },
    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        
        switch (subcommand) {
            case 'list':
                await handleListUsers(interaction);
                break;
            case 'info':
                await handleUserInfo(interaction);
                break;
            case 'ban':
                await handleBanUser(interaction);
                break;
            case 'unban':
                await handleUnbanUser(interaction);
                break;
        }
    },
};

// Handle list users
async function handleListUsers(interaction) {
    await interaction.deferReply();
    
    try {
        const page = interaction.options.getInteger('page') || 1;
        
        // Get users from API (mock implementation)
        const users = await getUsers(page);
        
        const embed = new EmbedBuilder()
            .setTitle('üë• ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
            .setDescription(`‡∏´‡∏ô‡πâ‡∏≤ ${page}`)
            .setColor(0x3498db)
            .setTimestamp();
            
        if (users.length > 0) {
            const userList = users.map(user => 
                `**${user.username}** (ID: ${user.id})\n` +
                `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${user.rank === 1 ? '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'} | ` +
                `‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: ${user.point} | ` +
                `‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${new Date(user.date).toLocaleDateString('th-TH')}`
            ).join('\n\n');
            
            embed.addFields({ name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', value: userList, inline: false });
        } else {
            embed.addFields({ name: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', inline: false });
        }
        
        await interaction.editReply({ embeds: [embed] });
    } catch (error) {
        console.error('Error in users list:', error);
        await interaction.editReply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
}

// Handle user info
async function handleUserInfo(interaction) {
    await interaction.deferReply();
    
    try {
        const userId = interaction.options.getString('user_id');
        
        // Get user info from API (mock implementation)
        const user = await getUserInfo(userId);
        
        if (!user) {
            await interaction.editReply({ content: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
            return;
        }
        
        const embed = new EmbedBuilder()
            .setTitle('üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
            .setColor(0x2ecc71)
            .addFields(
                { name: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: user.username, inline: true },
                { name: '‡πÑ‡∏≠‡∏î‡∏µ', value: user.id.toString(), inline: true },
                { name: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•', value: user.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
                { name: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', value: user.rank === 1 ? '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' : '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', inline: true },
                { name: '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï', value: `${user.point} ‡∏ö‡∏≤‡∏ó`, inline: true },
                { name: '‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°', value: `${user.total} ‡∏ö‡∏≤‡∏ó`, inline: true },
                { name: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', value: new Date(user.date).toLocaleDateString('th-TH'), inline: true }
            )
            .setTimestamp();
            
        await interaction.editReply({ embeds: [embed] });
    } catch (error) {
        console.error('Error in user info:', error);
        await interaction.editReply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
}

// Handle ban user
async function handleBanUser(interaction) {
    await interaction.deferReply();
    
    try {
        const userId = interaction.options.getString('user_id');
        const reason = interaction.options.getString('reason') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•';
        
        // Ban user via API (mock implementation)
        const result = await banUser(userId, reason);
        
        if (result.success) {
            const embed = new EmbedBuilder()
                .setTitle('üî® ‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                .setDescription(`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: ${userId} ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`)
                .addFields(
                    { name: '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•', value: reason, inline: false },
                    { name: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢', value: `<@${interaction.user.id}>`, inline: false }
                )
                .setColor(0xe74c3c)
                .setTimestamp();
                
            await interaction.editReply({ embeds: [embed] });
        } else {
            await interaction.editReply({ content: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ${result.message}` });
        }
    } catch (error) {
        console.error('Error in ban user:', error);
        await interaction.editReply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
}

// Handle unban user
async function handleUnbanUser(interaction) {
    await interaction.deferReply();
    
    try {
        const userId = interaction.options.getString('user_id');
        
        // Unban user via API (mock implementation)
        const result = await unbanUser(userId);
        
        if (result.success) {
            const embed = new EmbedBuilder()
                .setTitle('‚úÖ ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                .setDescription(`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: ${userId} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`)
                .addFields(
                    { name: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢', value: `<@${interaction.user.id}>`, inline: false }
                )
                .setColor(0x2ecc71)
                .setTimestamp();
                
            await interaction.editReply({ embeds: [embed] });
        } else {
            await interaction.editReply({ content: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ${result.message}` });
        }
    } catch (error) {
        console.error('Error in unban user:', error);
        await interaction.editReply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }
}

// Mock API functions (replace with actual implementations)
async function getUsers(page = 1) {
    // Mock implementation
    return [
        { id: 1, username: 'admin', email: 'admin@example.com', rank: 1, point: 1000, total: 5000, date: '2023-01-01' },
        { id: 2, username: 'user1', email: 'user1@example.com', rank: 0, point: 500, total: 1000, date: '2023-01-15' },
        { id: 3, username: 'user2', email: 'user2@example.com', rank: 0, point: 250, total: 750, date: '2023-02-01' }
    ];
}

async function getUserInfo(userId) {
    // Mock implementation
    if (userId === '1') {
        return { id: 1, username: 'admin', email: 'admin@example.com', rank: 1, point: 1000, total: 5000, date: '2023-01-01' };
    } else if (userId === '2') {
        return { id: 2, username: 'user1', email: 'user1@example.com', rank: 0, point: 500, total: 1000, date: '2023-01-15' };
    }
    return null;
}

async function banUser(userId, reason) {
    // Mock implementation
    console.log(`Banning user ${userId} for reason: ${reason}`);
    return { success: true, message: 'User banned successfully' };
}

async function unbanUser(userId) {
    // Mock implementation
    console.log(`Unbanning user ${userId}`);
    return { success: true, message: 'User unbanned successfully' };
}