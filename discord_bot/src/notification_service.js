// Notification service for sending various alerts
const { EmbedBuilder, WebhookClient } = require('discord.js');
const winston = require('./utils/logger');
const config = require('../config/config.json');

// Webhook clients for different notification types
const notificationClients = {
    orders: new WebhookClient({ url: process.env.ORDER_WEBHOOK_URL || config.discord.orderWebhookUrl }),
    topups: new WebhookClient({ url: process.env.TOPUP_WEBHOOK_URL || config.discord.topupWebhookUrl }),
    inventory: new WebhookClient({ url: process.env.INVENTORY_WEBHOOK_URL || config.discord.inventoryWebhookUrl }),
    security: new WebhookClient({ url: process.env.SECURITY_WEBHOOK_URL || config.discord.securityWebhookUrl }),
    general: new WebhookClient({ url: process.env.GENERAL_WEBHOOK_URL || config.discord.generalWebhookUrl })
};

// Notification service class
class NotificationService {
    
    // Send new order notification
    static async sendNewOrder(orderData) {
        if (!config.notifications.newOrder) {
            winston.info('NEW_ORDER_NOTIFICATION_DISABLED');
            return;
        }
        
        try {
            const embed = new EmbedBuilder()
                .setTitle('üõí ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà')
                .setDescription('‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
                .setColor(0x2ecc71)
                .addFields(
                    { name: '‡πÑ‡∏≠‡∏î‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', value: orderData.orderId.toString(), inline: true },
                    { name: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', value: orderData.productName, inline: true },
                    { name: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', value: orderData.quantity.toString(), inline: true },
                    { name: '‡∏£‡∏≤‡∏Ñ‡∏≤', value: `${orderData.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, inline: true },
                    { name: '‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', value: `${orderData.userName} (ID: ${orderData.userId})`, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Dedazen Store Notification', iconURL: 'https://yourwebsite.com/logo.png' });
            
            await notificationClients.orders.send({
                embeds: [embed],
                username: 'Dedazen Store Orders',
                avatarURL: 'https://yourwebsite.com/logo.png'
            });
            
            winston.info('NEW_ORDER_NOTIFICATION_SENT', { orderId: orderData.orderId });
        } catch (error) {
            winston.error('ERROR_SENDING_NEW_ORDER_NOTIFICATION', error);
        }
    }
    
    // Send new topup notification
    static async sendNewTopup(topupData) {
        if (!config.notifications.newTopup) {
            winston.info('NEW_TOPUP_NOTIFICATION_DISABLED');
            return;
        }
        
        try {
            const embed = new EmbedBuilder()
                .setTitle('üí∞ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà')
                .setDescription('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
                .setColor(0xf1c40f)
                .addFields(
                    { name: '‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', value: topupData.topupId.toString(), inline: true },
                    { name: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', value: `${topupData.amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, inline: true },
                    { name: '‡∏ú‡∏π‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', value: `${topupData.userName} (ID: ${topupData.userId})`, inline: true },
                    { name: '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', value: topupData.paymentMethod, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Dedazen Store Notification', iconURL: 'https://yourwebsite.com/logo.png' });
            
            await notificationClients.topups.send({
                embeds: [embed],
                username: 'Dedazen Store Topups',
                avatarURL: 'https://yourwebsite.com/logo.png'
            });
            
            winston.info('NEW_TOPUP_NOTIFICATION_SENT', { topupId: topupData.topupId });
        } catch (error) {
            winston.error('ERROR_SENDING_NEW_TOPUP_NOTIFICATION', error);
        }
    }
    
    // Send low stock notification
    static async sendLowStock(stockData) {
        if (!config.notifications.lowStock) {
            winston.info('LOW_STOCK_NOTIFICATION_DISABLED');
            return;
        }
        
        try {
            const embed = new EmbedBuilder()
                .setTitle('‚ö†Ô∏è ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥')
                .setDescription('‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å')
                .setColor(0xe74c3c)
                .addFields(
                    { name: '‡πÑ‡∏≠‡∏î‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', value: stockData.productId.toString(), inline: true },
                    { name: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', value: stockData.productName, inline: true },
                    { name: '‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', value: stockData.currentStock.toString(), inline: true },
                    { name: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î', value: stockData.threshold.toString(), inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Dedazen Store Notification', iconURL: 'https://yourwebsite.com/logo.png' });
            
            await notificationClients.inventory.send({
                embeds: [embed],
                username: 'Dedazen Store Inventory',
                avatarURL: 'https://yourwebsite.com/logo.png'
            });
            
            winston.info('LOW_STOCK_NOTIFICATION_SENT', { productId: stockData.productId });
        } catch (error) {
            winston.error('ERROR_SENDING_LOW_STOCK_NOTIFICATION', error);
        }
    }
    
    // Send security alert notification
    static async sendSecurityAlert(alertData) {
        if (!config.notifications.securityAlert) {
            winston.info('SECURITY_ALERT_NOTIFICATION_DISABLED');
            return;
        }
        
        try {
            const embed = new EmbedBuilder()
                .setTitle('üîí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢')
                .setDescription('‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢')
                .setColor(0xe74c3c)
                .addFields(
                    { name: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå', value: alertData.eventType, inline: true },
                    { name: '‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå', value: alertData.eventId.toString(), inline: true },
                    { name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: alertData.userId ? `ID: ${alertData.userId}` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
                    { name: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà IP', value: alertData.ipAddress || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
                    { name: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', value: alertData.details || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', inline: false }
                )
                .setTimestamp()
                .setFooter({ text: 'Dedazen Store Security', iconURL: 'https://yourwebsite.com/logo.png' });
            
            await notificationClients.security.send({
                embeds: [embed],
                username: 'Dedazen Store Security',
                avatarURL: 'https://yourwebsite.com/logo.png'
            });
            
            winston.info('SECURITY_ALERT_NOTIFICATION_SENT', { eventId: alertData.eventId, userId: alertData.userId });
        } catch (error) {
            winston.error('ERROR_SENDING_SECURITY_ALERT_NOTIFICATION', error);
        }
    }
    
    // Send new user notification
    static async sendNewUser(userData) {
        if (!config.notifications.newUser) {
            winston.info('NEW_USER_NOTIFICATION_DISABLED');
            return;
        }
        
        try {
            const embed = new EmbedBuilder()
                .setTitle('üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà')
                .setDescription('‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')
                .setColor(0x3498db)
                .addFields(
                    { name: '‡πÑ‡∏≠‡∏î‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: userData.userId.toString(), inline: true },
                    { name: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', value: userData.username, inline: true },
                    { name: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•', value: userData.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', inline: true },
                    { name: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', value: userData.registrationDate, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Dedazen Store Notification', iconURL: 'https://yourwebsite.com/logo.png' });
            
            await notificationClients.general.send({
                embeds: [embed],
                username: 'Dedazen Store',
                avatarURL: 'https://yourwebsite.com/logo.png'
            });
            
            winston.info('NEW_USER_NOTIFICATION_SENT', { userId: userData.userId });
        } catch (error) {
            winston.error('ERROR_SENDING_NEW_USER_NOTIFICATION', error);
        }
    }
    
    // Send daily report
    static async sendDailyReport(reportData) {
        try {
            const embed = new EmbedBuilder()
                .setTitle('üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô Dedazen Store')
                .setDescription(`‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${reportData.date}`)
                .setColor(0xff6b35)
                .addFields(
                    { name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà', value: reportData.newUsers.toString(), inline: true },
                    { name: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà', value: reportData.newOrders.toString(), inline: true },
                    { name: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', value: reportData.newTopups.toString(), inline: true },
                    { name: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°', value: `${reportData.totalRevenue.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, inline: true },
                    { name: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ', value: reportData.bestSellingProduct || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Dedazen Store Bot', iconURL: 'https://yourwebsite.com/logo.png' });
            
            await notificationClients.general.send({
                embeds: [embed],
                username: 'Dedazen Store Reports',
                avatarURL: 'https://yourwebsite.com/logo.png'
            });
            
            winston.info('DAILY_REPORT_SENT');
        } catch (error) {
            winston.error('ERROR_SENDING_DAILY_REPORT', error);
        }
    }
    
    // Send custom notification
    static async sendCustomNotification(title, description, color = 0x3498db, fields = [], channel = 'general') {
        try {
            const embed = new EmbedBuilder()
                .setTitle(title)
                .setDescription(description)
                .setColor(color)
                .addFields(fields)
                .setTimestamp()
                .setFooter({ text: 'Dedazen Store Notification', iconURL: 'https://yourwebsite.com/logo.png' });
            
            const client = notificationClients[channel] || notificationClients.general;
            
            await client.send({
                embeds: [embed],
                username: 'Dedazen Store',
                avatarURL: 'https://yourwebsite.com/logo.png'
            });
            
            winston.info('CUSTOM_NOTIFICATION_SENT', { title, channel });
        } catch (error) {
            winston.error('ERROR_SENDING_CUSTOM_NOTIFICATION', error);
        }
    }
}

module.exports = NotificationService;